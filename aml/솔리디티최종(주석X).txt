pragma solidity ^0.4.11;
contract AMLEscrow {
    uint private start;
    address public owner = msg.sender;
	uint num=0;
    struct EscrowStruct{
        uint256 balance;
        uint256 EscrowNum;
        address seller;
        address buyer;
        string goodsname;
        bool sellerOk;
        bool buyerOk;
        uint256 sellingPrice;
        uint start;
    }
    EscrowStruct[] Escrows;
    function newEscrow(string _goods, uint256 _sellingPrice) public {
        if(_sellingPrice == 0) throw;
        Escrows.push(EscrowStruct(0, num++, msg.sender,0, _goods, false, false, _sellingPrice, now));
    }
    
    function getBalance(uint _number) public constant returns(uint){
        return Escrows[_number].balance;
    }
    function getEscrowNum(uint _number) public constant returns(uint){
        return Escrows[_number].EscrowNum;
    }
    function getseller(uint _number) public constant returns(address){
        return Escrows[_number].seller;
    }
    function getsellerOk(uint _number) public constant returns(bool){
        return Escrows[_number].sellerOk;
    }
    function getbuyer(uint _number) public constant returns(address){
        return Escrows[_number].buyer;
    }
    function getbuyerOk(uint _number) public constant returns(bool){
        return Escrows[_number].buyerOk;
    }
    function getgoodsname(uint _number) public constant returns(string){
        return Escrows[_number].goodsname;
    } 
    function getsellingPrice(uint _number) public constant returns(uint){
        return Escrows[_number].sellingPrice;
    }
    
    function deposit(uint _number) public payable {
        require(msg.value == Escrows[_number].sellingPrice);
        require(Escrows[_number].balance != Escrows[_number].sellingPrice);
        require(msg.sender != Escrows[_number].seller);
        Escrows[_number].balance += msg.value;
        Escrows[_number].buyer = msg.sender;
    }
	function accept(uint _number) public {
        if (msg.sender == Escrows[_number].buyer){
            Escrows[_number].buyerOk = true;
        } else if (msg.sender == Escrows[_number].seller && Escrows[_number].balance == Escrows[_number].sellingPrice){
            Escrows[_number].sellerOk = true;
        }
        if (Escrows[_number].buyerOk && Escrows[_number].sellerOk){
            payBalance(_number);
        } else if (Escrows[_number].buyerOk && !Escrows[_number].sellerOk && now > Escrows[_number].start + 10 days) {
            selfdestruct(Escrows[_number].buyer);
        }
    }
	function payBalance(uint _number) private {
        if (Escrows[_number].seller.send(Escrows[_number].balance)) {
            Escrows[_number].balance = 0;
            Escrows[_number].seller = Escrows[_number].buyer;
            Escrows[_number].buyer = 0;
            Escrows[_number].sellerOk = false;
        } else {
            throw;
        }
    }
    function cancel(uint _number) public {
        if (msg.sender ==Escrows[_number]. buyer){
            Escrows[_number].buyerOk = false;
        } else if (msg.sender == Escrows[_number].seller){
            Escrows[_number].sellerOk = false;
        }
        if (!Escrows[_number].buyerOk && !Escrows[_number].sellerOk){
            if (Escrows[_number].buyer.send(Escrows[_number].balance)) {
            Escrows[_number].balance = 0;
            Escrows[_number].buyer = 0;
            }
        }
    }
    function kill() public {
        if (msg.sender == owner) {
            selfdestruct(owner);
        }
    }
}